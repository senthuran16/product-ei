<!-- Simple rule based routing  of messages - same as filter mediator -->
<definitions xmlns="http://ws.apache.org/ns/synapse">
    <proxy name="MultipleRuleSetPropertyTestProxy"
           transports="http,https"
           statistics="disable"
           trace="disable"
           startOnLoad="true">
    <target>
        <inSequence>
            <rule xmlns="http://wso2.org/carbon/rules">
                <source>soapBody</source>
                <target action="replace" resultXpath="//accept/child::text()">$accept</target>
                <ruleSet>
                    <properties/>
                    <rule resourceType="regular" sourceType="inline">
                        <![CDATA[ package SimpleRoutingRules;

                        rule "Invoke IBM" no-loop true
                        when
                        symbol: String()eval( symbol.equals("IBM") )
                        then
                         update(drools.getWorkingMemory().getFactHandle(symbol),"ibmEndPoint");
                        end

                        rule "Invoke SUN" no-loop true
                        when
                        symbol: String()eval( symbol.equals("SUN") )
                        then
                         update(drools.getWorkingMemory().getFactHandle(symbol),"sunEndPoint");
                        end

                        rule "Invoke MFST" no-loop true
                        when
                        symbol: String()eval( symbol.equals("MFST") )
                        then
                         update(drools.getWorkingMemory().getFactHandle(symbol),"mfstEndPoint");
                        end
                        ]]>
                    </rule>
                </ruleSet>
                <input namespace="http://services.samples" wrapperElementName="getQuote">
                    <fact xmlns:m0="http://services.samples" elementName="symbol" namespace="http://services.samples"
                          type="java.lang.String" xpath="//m0:getQuote/m0:request/m0:symbol/child::text()"/>
                </input>
                <output namespace="http://services.samples" wrapperElementName="getQuoteRespone">
                    <fact elementName="accept" namespace="" type="java.lang.String"/>
                </output>
            </rule>

            <switch source="get-property('accept')">
                <case regex="ibmEndPoint">
                    <call>
                        <endpoint>
                            <address uri="http://localhost:9000/services/SimpleStockQuoteService">
                                <suspendOnFailure>
                                    <errorCodes>-1</errorCodes>
                                    <initialDuration>0</initialDuration>
                                    <progressionFactor>1</progressionFactor>
                                    <maximumDuration>0</maximumDuration>
                                </suspendOnFailure>
                            </address>
                        </endpoint>
                    </call>
                    <respond/>
                </case>
                <case regex="sunEndPoint">
                    <sequence key="nonExistentService1"/>
                </case>
                <case regex="mfstEndPoint">
                    <sequence key="nonExistentService2"/>
                </case>
            </switch>

            <drop/>
        </inSequence>
    </target>
    </proxy>

    <sequence name="nonExistentService1" onError="myFaultHandler">
        <call>
            <endpoint>
                <address uri="http://localhost:8480/services/nonExistentServiceProxy">
                    <suspendOnFailure>
                        <errorCodes>-1</errorCodes>
                        <initialDuration>0</initialDuration>
                        <progressionFactor>1</progressionFactor>
                        <maximumDuration>0</maximumDuration>
                    </suspendOnFailure>
                </address>
            </endpoint>
        </call>
        <respond/>
    </sequence>
    <sequence name="nonExistentService2" onError="myFaultHandler">
        <call>
            <endpoint>
                <address uri="http://localhost:8480/services/nonExistentServiceProxy">
                    <suspendOnFailure>
                        <errorCodes>-1</errorCodes>
                        <initialDuration>0</initialDuration>
                        <progressionFactor>1</progressionFactor>
                        <maximumDuration>0</maximumDuration>
                    </suspendOnFailure>
                </address>
            </endpoint>
        </call>
        <respond/>
    </sequence>

    <sequence name="myFaultHandler">
        <makefault>
            <code value="tns:Server" xmlns:tns="http://schemas.xmlsoap.org/soap/envelope/"/>
            <reason expression="get-property('ERROR_MESSAGE')"/>
        </makefault>

        <property name="RESPONSE" value="true"/>
        <header name="To" expression="get-property('ReplyTo')"/>
        <send/>
    </sequence>

    <proxy xmlns="http://ws.apache.org/ns/synapse"
           name="nonExistentServiceProxy"
           transports="http,https"
           statistics="disable"
           trace="disable"
           startOnLoad="true">
        <target>
            <inSequence>
                <payloadFactory media-type="xml">
                    <format>
                        <ms11:text xmlns:ms11="http://ws.apache.org/commons/ns/payload">$1</ms11:text>
                    </format>
                    <args>
                        <arg value="&lt;soap:Envelope
                        xmlns:soap=&#34;http://schemas.xmlsoap.org/soap/envelope/&#34;
                        xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;
                        xmlns:xsd=&#34;http://www.w3.org/2001/XMLSchema&#34;&gt;
                        &lt;soap:Body&gt;
                        &lt;test xmlns=&#34;http://tempUri.org/&#34;&gt;WRONG_RULE&lt;/test&gt;
                        &lt;/soap:Body&gt;
                        &lt;/soap:Envelope&gt;"/>
                    </args>
                </payloadFactory>
                <property name="messageType" value="text/xml" scope="axis2"/>
                <log/>
                <respond/>
            </inSequence>
            <outSequence>
                <log/>
            </outSequence>
        </target>
        <description/>
    </proxy>
</definitions>
